/*****************************Exam_2011_87************************************/
public static boolean isPath(int [] [] mat)
	{
		return isPath(mat, 0,0,mat[0][0],"" );
	}
	private static boolean isPath(int [] [] mat , int i,int j , int prevCell,String s)
	{
		if ( i < 0 || i == mat.length || j < 0 || j == mat[i].length || mat[i][j] - prevCell > 1 ||  mat[i][j] - prevCell < 0 )
		{
			return false;
		}
		if( i == mat.length -1 && j == mat[i].length-1)
		{
			s+= mat[i][j];
			System.out.println(s);
			return true;
		}
		
		
		boolean op1 = isPath(mat, i+1, j, mat[i][j],s  + mat[i][j]+ "->");
		boolean op2 = isPath(mat, i-1, j, mat[i][j],s+ mat[i][j]+ "->");
		boolean op3 = isPath(mat, i, j+1, mat[i][j],s  + mat[i][j]+ "->");
		boolean op4 = isPath(mat, i, j-1, mat[i][j],s  + mat[i][j]+ "->");
		
		return op1 || op2 || op3 || op4;
	}
  /*****************************Exam_2012_82************************************/
  
  /*****************************Q1************************************/
  public static boolean isSumOf(int [] a , int n)
		{
			return isSumOf(a, n,0,"");
		}
		private static boolean isSumOf(int [] a , int n, int i ,String s)
		{
			if(i == a.length)
			{
				if(n == 0)
				{
					System.out.println(s);
					return true;
				}
				return false;
			}
			if ( n < 0)
			{
				return false;
			}
			boolean op1 = isSumOf(a, n-a[i], i, s + a[i] + " ");
			boolean op2 = isSumOf(a, n, i+1, s);
			return op1 || op2;
			
		}
		 /*****************************Q2************************************/
		public static int count(int [] a,int x)
		{
			int low = 0;
			int high = a.length-1;
			int leftIndex = -1;
			while(low <= high && leftIndex == -1)
			{
				int mid =( high+low ) / 2;
				if(a[mid] == x && (mid == low || a[mid-1] < x))
				{
					leftIndex = mid;
				}
				if(a[mid] > x || ( a[mid] == x && mid > low && (a[mid-1] == x)))
				{
					high = mid -1;
				}
				if(a[mid] < x)
				{
					low = mid+1;
				}
			}
			if(leftIndex == -1)
				{
				return 0;
				}
			low = 0;
			high = a.length-1;
			int rightIndex = -1;
			while(low <= high && rightIndex == -1)
			{
				int mid =(high+low) / 2;
				if(a[mid] == x && (mid == high || a[mid+1] > x))
				{
					rightIndex = mid;
				}
				if(a[mid] > x )
				{
					high = mid -1;
				}
				if(a[mid] < x || ( a[mid] == x && mid < high && (a[mid+1] == x)))
				{
					low = mid +1;
				}
			}
			return rightIndex - leftIndex + 1;
		}
    
  /*****************************Exam_2012_85************************************/
    

	public static void printPathWeights(int[][] m) {
		printPathWeights(m, 0, 0, 0);
	}

	private static void printPathWeights(int[][] m, int i, int j, int sum) {
		if (i < 0 || i == m.length || j < 0 || j == m[i].length || m[i][j] == -1) {
			return;
		}
		int temp = m[i][j];
		 sum +=  m[i][j];
		if (i == m.length - 1 && j == m[i].length - 1) {
			System.out.println(sum);
		}
		
		m[i][j] = -1;
		printPathWeights(m, i + 1, j, sum );
		printPathWeights(m, i - 1, j, sum );
		printPathWeights(m, i, j + 1, sum);
		printPathWeights(m, i, j - 1, sum);
		m[i][j] = temp;
		return;
		
	}

}
/*****************************Exam_2012_92************************************/

public static boolean isWay(int [] a)
	{
		return isWay(a,0,a[0],"");
	}
	
	private static boolean isWay(int [] a , int i,int prevCell ,String s)
	{
		if ( i < 0 || i >= a.length || a[i] == -1)
		{
			return false;
		}
	
		
		if ( i == a.length-1)
		{
			System.out.println(s);
			return true;
		}
		
		prevCell = a[i];
	    a[i] = -1;
		boolean op1 = isWay(a, i+prevCell,prevCell,s + " right: " + prevCell);
		boolean op2 = isWay(a, i-prevCell,prevCell,s + " left: " + prevCell);
		a[i] = prevCell;
		return op1 || op2;
	}
  
